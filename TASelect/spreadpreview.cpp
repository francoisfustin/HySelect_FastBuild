// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "spreadpreview.h"

// Dispatch interfaces referenced by this interface
#include "picture.h"

/////////////////////////////////////////////////////////////////////////////
// CSpreadPreview

IMPLEMENT_DYNCREATE(CSpreadPreview, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSpreadPreview properties

BOOL CSpreadPreview::GetAllowUserZoom()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadPreview::SetAllowUserZoom(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

unsigned long CSpreadPreview::GetGrayAreaColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetGrayAreaColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CSpreadPreview::GetGrayAreaMarginH()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetGrayAreaMarginH(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CSpreadPreview::GetGrayAreaMarginType()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetGrayAreaMarginType(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CSpreadPreview::GetGrayAreaMarginV()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetGrayAreaMarginV(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CSpreadPreview::GetHWndSpread()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetHWndSpread(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CSpreadPreview::GetPageBorderColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageBorderColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

short CSpreadPreview::GetPageBorderWidth()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageBorderWidth(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

unsigned long CSpreadPreview::GetPageShadowColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageShadowColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

short CSpreadPreview::GetPageShadowWidth()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageShadowWidth(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CSpreadPreview::GetPageViewPercentage()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageViewPercentage(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

long CSpreadPreview::GetPageViewType()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageViewType(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CSpreadPreview::GetScrollBarH()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetScrollBarH(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CSpreadPreview::GetScrollBarV()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetScrollBarV(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CSpreadPreview::GetScrollIncH()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetScrollIncH(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CSpreadPreview::GetScrollIncV()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetScrollIncV(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

short CSpreadPreview::GetPageMultiCntH()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageMultiCntH(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CSpreadPreview::GetPageMultiCntV()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageMultiCntV(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

long CSpreadPreview::GetPageGutterH()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageGutterH(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CSpreadPreview::GetPageGutterV()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageGutterV(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CSpreadPreview::GetZoomState()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetZoomState(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CSpreadPreview::GetPageCurrent()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetPageCurrent(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

short CSpreadPreview::GetPagesPerScreen()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPagesPerScreen(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

short CSpreadPreview::GetPagePercentageActual()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}

void CSpreadPreview::SetPagePercentageActual(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}

long CSpreadPreview::GetMousePointer()
{
	long result;
	GetProperty(0x32, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetMousePointer(long propVal)
{
	SetProperty(0x32, VT_I4, propVal);
}

CPicture CSpreadPreview::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x33, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSpreadPreview::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x33, VT_DISPATCH, propVal);
}

long CSpreadPreview::GetOLEDropMode()
{
	long result;
	GetProperty(0x34, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetOLEDropMode(long propVal)
{
	SetProperty(0x34, VT_I4, propVal);
}

BOOL CSpreadPreview::GetScriptEnhanced()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadPreview::SetScriptEnhanced(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}

BOOL CSpreadPreview::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadPreview::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CSpreadPreview::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I4, (void*)&result);
	return result;
}

void CSpreadPreview::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSpreadPreview operations

void CSpreadPreview::OLEDrag()
{
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSpreadPreview::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
