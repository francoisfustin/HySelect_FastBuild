
#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CPicture;

/////////////////////////////////////////////////////////////////////////////
// CSpreadPreview wrapper class

class CSpreadPreview : public CWnd
{
protected:
	DECLARE_DYNCREATE(CSpreadPreview)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x6C30120B, 0x5FF5, 0x4352, { 0x88, 0x73, 0xB8, 0xB2, 0x36, 0x63, 0x48, 0xC2 } };
		return clsid;
	}

	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetAllowUserZoom();
	void SetAllowUserZoom(BOOL);
	unsigned long GetGrayAreaColor();
	void SetGrayAreaColor(unsigned long);
	long GetGrayAreaMarginH();
	void SetGrayAreaMarginH(long);
	long GetGrayAreaMarginType();
	void SetGrayAreaMarginType(long);
	long GetGrayAreaMarginV();
	void SetGrayAreaMarginV(long);
	long GetHWndSpread();
	void SetHWndSpread(long);
	unsigned long GetPageBorderColor();
	void SetPageBorderColor(unsigned long);
	short GetPageBorderWidth();
	void SetPageBorderWidth(short);
	unsigned long GetPageShadowColor();
	void SetPageShadowColor(unsigned long);
	short GetPageShadowWidth();
	void SetPageShadowWidth(short);
	short GetPageViewPercentage();
	void SetPageViewPercentage(short);
	long GetPageViewType();
	void SetPageViewType(long);
	long GetScrollBarH();
	void SetScrollBarH(long);
	long GetScrollBarV();
	void SetScrollBarV(long);
	long GetScrollIncH();
	void SetScrollIncH(long);
	long GetScrollIncV();
	void SetScrollIncV(long);
	short GetPageMultiCntH();
	void SetPageMultiCntH(short);
	short GetPageMultiCntV();
	void SetPageMultiCntV(short);
	long GetPageGutterH();
	void SetPageGutterH(long);
	long GetPageGutterV();
	void SetPageGutterV(long);
	long GetZoomState();
	void SetZoomState(long);
	long GetPageCurrent();
	void SetPageCurrent(long);
	short GetPagesPerScreen();
	void SetPagesPerScreen(short);
	short GetPagePercentageActual();
	void SetPagePercentageActual(short);
	long GetMousePointer();
	void SetMousePointer(long);
	CPicture GetMouseIcon();
	void SetMouseIcon(LPDISPATCH);
	long GetOLEDropMode();
	void SetOLEDropMode(long);
	BOOL GetScriptEnhanced();
	void SetScriptEnhanced(BOOL);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	short GetBorderStyle();
	void SetBorderStyle(short);

// Operations
public:
	void OLEDrag();
	void AboutBox();
};